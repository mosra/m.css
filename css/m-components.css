/*
    This file is part of m.css.

    Copyright © 2017, 2018, 2019, 2020 Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

/* Globals */
html {
  font-size: var(--font-size);
  background-color: var(--background-color);
}
body {
  font-family: var(--font);
  font-size: 1rem;
  line-height: var(--line-height);
  color: var(--color);
}

/* Block elements */
h1, h2, h3, h4, h5, h6 {
  margin-top: 0;
  font-weight: var(--heading-font-weight);
}
h1 {
  margin-bottom: 1rem;
}
h2, h3, h4, h5, h6 {
  margin-bottom: 0.5rem;
}
p, ul, ol, dl {
  margin-top: 0;
}
ul, ol {
  padding-left: 2rem;
}
:is(ul, ol) :is(ul, ol) {
  margin-bottom: 0;
}
main p {
  text-indent: var(--paragraph-indent);
  text-align: var(--paragraph-align);
}
/* Remove indentation and justification where it doesn't make sense */
main p.m-noindent, :is(li, dd, table.m-table td) > p {
  text-indent: 0;
  text-align: left;
}
blockquote {
  margin-top: 0;
  margin-left: 1rem;
  margin-right: 1rem;
  padding: 1rem;
  border-left-style: solid;
  border-left-width: 0.25rem;
}
hr {
  width: 75%;
  border-width: 0.0625rem;
  border-style: solid;
}
blockquote, hr {
  border-color: var(--line-color);
}

/* Inline elements */
strong, .m-text.m-strong { font-weight: bold; }
em, .m-text.m-em { font-style: italic; }
s, .m-text.m-s { text-decoration: line-through; }
sub, sup, .m-text.m-sub, .m-text.m-sup {
  /* https://gist.github.com/unruthless/413930 */
  font-size: 0.75rem;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sup, .m-text.m-sup { top: -0.35rem; }
sub, .m-text.m-sub { bottom: -0.2rem; }
abbr {
  cursor: help;
  text-decoration: underline dotted;
}
a {
  color: var(--link-color);
}
a.m-flat {
  text-decoration: none;
}
a:is(:hover, :focus, :active) {
  color: var(--link-active-color);
}
a img { border: 0; } /* Why you so special, IE?! */
svg a { cursor: pointer; } /* And why YOU, CHROME?! */
mark {
  padding: 0.0625rem;
  background-color: var(--mark-background-color);
  color: var(--mark-color);
}
.m-link-wrap {
  word-break: break-all;
}

/* Block/inline code */
pre, code {
  font-family: var(--code-font), monospace, monospace; /* https://en.wikipedia.org/wiki/User:Davidgothberg/Test59 */
  font-size: var(--code-font-size);
  color: var(--code-color);
  background-color: var(--code-background-color);
}
:is(pre, code).m-console {
  color: var(--console-color);
  background-color: var(--console-background-color);
}
pre {
  padding: 0.5rem 1rem;
  border-radius: var(--border-radius);
  overflow-x: auto;
  margin-top: 0; /* stupid defaults */
}
pre.m-console-wrap {
  white-space: pre-wrap;
  word-break: break-all;
}
code {
  padding: 0.125rem;
}

/* Focus outline on link, canvas and input: match the focused header item. */
*:focus { outline-color: var(--header-link-current-color); }

/* Utility */
div.m-scroll {
  max-width: 100%;
  overflow-x: auto;
}
.m-fullwidth {
  width: 100%;
}
.m-spacing-150 {
  /* saying 1.5 should be better according to https://stackoverflow.com/a/20818206,
     but here I need consistent spacing together with .m-big etc. */
  line-height: 1.5rem;
}
.m-text-center, .m-text-center.m-noindent, table.m-table th.m-text-center, .m-text-center p {
  text-align: center;
}
.m-text-left, .m-text-left.m-noindent, table.m-table th.m-text-left, .m-text-right p {
  text-align: left;
}
.m-text-right, .m-text-right.m-noindent, table.m-table th.m-text-right, .m-text-right p {
  text-align: right;
}
.m-text-top, table.m-table th.m-text-top, table.m-table td.m-text-top {
  vertical-align: top;
}
.m-text-middle, table.m-table th.m-text-middle, table.m-table td.m-text-middle {
  vertical-align: middle;
}
.m-text-bottom, table.m-table th.m-text-bottom, table.m-table td.m-text-bottom {
  vertical-align: bottom;
}
.m-text.m-tiny { font-size: 50.0%; }
.m-text.m-small { font-size: 85.4%; }
.m-text.m-big { font-size: 117%; }
:is(h1, h2, h3, h4, h5, h6) .m-thin {
  font-weight: normal;
}

/* Lists */
:is(ul, ol).m-unstyled {
  list-style-type: none;
  padding-left: 0;
}
:is(ul, ol)[class*='m-block-'] {
  padding-left: 0;
}
:is(ul, ol)[class*='m-block-'] li {
  display: inline;
}
:is(ul, ol)[class*='m-block-bar-'] li:not(:last-child)::after {
  content: " | ";
}
:is(ul, ol)[class*='m-block-dot-'] li:not(:last-child)::after {
  content: " • ";
}
@media screen and (min-width: 576px) {
  :is(ul, ol):is(.m-block-bar-s, .m-block-dot-s) { padding-left: 2rem; }
  :is(ul, ol):is(.m-block-bar-s, .m-block-dot-s) li { display: list-item; }
  :is(ul, ol):is(.m-block-bar-s, .m-block-dot-s) li:not(:last-child)::after { content: ""; }
}
@media screen and (min-width: 768px) {
  :is(ul, ol):is(.m-block-bar-m, .m-block-dot-m) { padding-left: 2rem; }
  :is(ul, ol):is(.m-block-bar-m, .m-block-dot-m) li { display: list-item; }
  :is(ul, ol):is(.m-block-bar-m, .m-block-dot-m) li:not(:last-child)::after { content: ""; }
}
@media screen and (min-width: 992px) {
  :is(ul, ol):is(.m-block-bar-l, .m-block-dot-l) { padding-left: 2rem; }
  :is(ul, ol):is(.m-block-bar-l, .m-block-dot-l) li { display: list-item; }
  :is(ul, ol):is(.m-block-bar-l, .m-block-dot-l) li:not(:last-child)::after { content: ""; }
}

/* Special paragraph styling */
p.m-poem {
  text-indent: 0;
  text-align: left;
  margin-left: var(--paragraph-indent);
}
p.m-transition {
  color: var(--line-color);
  text-indent: 0;
  text-align: center;
  font-size: 2rem;
}

/* Definition list styling */
dl.m-diary {
  margin-bottom: 1.25rem;
}
dl.m-diary:last-child {
  margin-bottom: 0.25rem;
}
dl.m-diary dt {
  font-weight: bold;
  width: 6rem; /* Large enough so it can fit a date (Aug 27, 2019) as well */
  float: left;
  clear: both;
  padding-top: 0.25rem;
}
dl.m-diary dd {
  padding-top: 0.25rem;
  padding-left: 6rem;
  margin-left: 0;
}

/* Footnotes, footnote references */
:is(a, dl, dd).m-footnote {
  top: -0.35rem; /* Same as .m-text.m-sup */
  font-size: 0.75rem;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
:is(a, dl, dd).m-footnote a {
  text-decoration: none;
}
a.m-footnote::before { content: '['; }
a.m-footnote::after { content: ']'; }
dl.m-footnote dt {
  width: 1.5rem;
  float: left;
  clear: both;
}
dl.m-footnote dd {
  margin-left: 1.5rem;
}
dl.m-footnote { /* Same as .m-small */
  font-size: 85.4%;
}
dl.m-footnote dd span.m-footnote a {
  font-weight: bold;
  font-style: italic;
}

/* Note, frame, block */
.m-note {
  border-radius: var(--border-radius);
  padding: 1rem;
}
.m-frame {
  background-color: var(--background-color);
  border-style: solid;
  border-width: 0.125rem;
  border-radius: var(--border-radius);
  border-color: var(--line-color);
  padding: 0.875rem;
}
.m-block {
  border-style: solid;
  border-width: 0.0625rem;
  border-left-width: 0.25rem;
  border-radius: var(--border-radius);
  border-color: var(--line-color);
  padding: 0.9375rem 0.9375rem 0.9375rem 0.75rem;
}

/* Badge */
.m-block.m-badge::after {
  content: ' ';
  display: block;
  clear: both;
}
.m-block.m-badge h3 {
  margin-left: 5rem;
}
.m-block.m-badge p {
  margin-left: 5rem;
  text-indent: 0;
}
.m-block.m-badge img {
  width: 4rem;
  height: 4rem;
  border-radius: 2rem;
  float: left;
}

/* Button */
div.m-button {
  text-align: center;
}
div.m-button a {
  display: inline-block;
  border-radius: var(--border-radius);
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
  padding-left: 1.5rem;
  padding-right: 1.5rem;
  text-decoration: none;
  font-size: 1.17rem;
}
div.m-button.m-fullwidth a {
  display: block;
  padding-left: 0.5rem;
  padding-right: 0.5rem;
}
div.m-button a .m-big:first-child {
  font-size: 1.37rem;
  font-weight: bold;
}
div.m-button a .m-small:last-child {
  font-size: 0.854rem;
}

/* Label */
.m-label {
  border-radius: var(--border-radius);
  font-size: 75%;
  font-weight: normal;
  padding: 0.125rem 0.25rem;
  vertical-align: 7.5%;
}
.m-label.m-flat {
  border-width: 0.0625rem;
  border-style: solid;
  border-color: var(--dim-color);
  padding: 0.0625rem 0.1875rem;
}

/* Tables */
table.m-table {
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
}
table.m-table.m-big {
  margin-top: 1.75rem;
}
div.m-scroll > table.m-table:last-child {
  margin-bottom: 0.0625rem;
}
table.m-table:not(.m-flat) tbody tr:hover {
  background-color: var(--line-color);
}
table.m-table :is(th, td) {
  vertical-align: top;
  border-style: solid;
  border-top-width: 0.0625rem;
  border-left-width: 0;
  border-right-width: 0;
  border-bottom-width: 0;
  border-color: var(--line-color);
}
table.m-table caption {
  padding-bottom: 0.5rem;
}
table.m-table thead tr:first-child :is(th, td) {
  border-top-width: 0.125rem;
}
table.m-table thead :is(th, td) {
  border-bottom-width: 0.125rem;
  vertical-align: bottom;
}
table.m-table tfoot :is(th, td) {
  border-top-width: 0.125rem;
}
table.m-table :is(th, td) {
  padding: 0.5rem;
}
table.m-table.m-big :is(th, td) {
  padding: 0.75rem 1rem;
}
table.m-table th {
  text-align: left;
}
table.m-table th.m-thin {
  font-weight: normal;
}
table.m-table :is(th, td):is(.m-default, .m-primary, .m-success, .m-warning, .m-danger, .m-info, .m-dim) {
  padding-left: 0.4375rem;
  padding-right: 0.4375rem;
  border-left-width: 0.0625rem;
/*   border-right-width: 0.0625rem; causes horizontal scrollbar */
}
table.m-table.m-big :is(th, td):is(.m-default, .m-primary, .m-success, .m-warning, .m-danger, .m-info, .m-dim) {
  padding-left: 0.9375rem;
  padding-right: 0.9375rem;
  border-left-width: 0.0625rem;
/*   border-right-width: 0.0625rem; causes horizontal scrollbar */
}
table.m-table tr:is(.m-default, .m-primary, .m-success, .m-warning, .m-danger, .m-info, .m-dim) :is(th, td),
table.m-table :is(th, td):is(.m-default, .m-primary, .m-success, .m-warning, .m-danger, .m-info, .m-dim) {
  border-color: var(--background-color);
}

/* Code on a colored background has a semi-transparent background */
:is(
  .m-note,
  table.m-table :is(tr, td, th):is(.m-default, .m-primary, .m-success, .m-warning, .m-danger, .m-info, .m-dim)
) :is(pre, code) {
  background-color: var(--code-note-background-color);
}

/* Image. Ensure everything is done for both <img> and <svg>. */
:is(img, svg).m-image {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
div.m-image {
  text-align: center;
}
:is(img, svg).m-image, div.m-image :is(img, svg) {
  max-width: 100%;
  border-radius: var(--border-radius);
}
div.m-image.m-fullwidth :is(img, svg) {
  width: 100%;
}
/* Image badge. Deliberately omitting <svg> since I don't see any use for those
   as avatars yet. */
img.m-image.m-badge, div.m-image.m-badge img {
  border-radius: 50%;
}

/* Figure. Ensure everything is done for both <img> and <svg>. */
figure.m-figure {
  max-width: 100%;
  margin-top: 0;
  margin-left: auto;
  margin-right: auto;
  position: relative;
  display: table;
}
figure.m-figure::before {
  position: absolute;
  content: ' ';
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: -1; /* so it doesn't make the contents inactive */
  border-style: solid;
  border-width: 0.125rem;
  border-radius: var(--border-radius);
  border-color: var(--line-color);
}
figure.m-figure.m-flat::before {
  border-color: transparent;
}
figure.m-figure > * {
  margin-left: 1rem;
  margin-right: 1rem;
  display: table-caption;
  caption-side: bottom;
}
figure.m-figure > *:first-child {
  /* otherwise figure with clickable image is centered differently */
  display: inline;
}
figure.m-figure > *:last-child {
  /* Need !important so the :last-child margin reset doesn't have higher
     priority than this */
  margin-bottom: 1rem !important;
}
figure.m-figure :is(img, svg) {
  position: relative; /* so it's above the border */
  margin-left: 0;
  margin-right: 0;
  margin-bottom: 0;
  border-top-left-radius: var(--border-radius);
  border-top-right-radius: var(--border-radius);
  max-width: 100%;
}
figure.m-figure.m-flat :is(img, svg) {
  border-bottom-left-radius: var(--border-radius);
  border-bottom-right-radius: var(--border-radius);
}
figure.m-figure a :is(img, svg) {
  margin-left: -1rem;
  margin-right: -1rem;
}
figure.m-figure.m-fullwidth, figure.m-figure.m-fullwidth > * {
  /* Using inline for the content would lose the margin on wrapped lines */
  display: block;
}
figure.m-figure.m-fullwidth > *:first-child {
  /* otherwise figure with clickable image is centered differently */
  display: inline;
}
figure.m-figure.m-fullwidth :is(img, svg) {
  width: 100%;
}
figure.m-figure.m-fullwidth::after {
  /* Specifying bottom margin on the last element works only if it is displayed
     as table caption, so I have to hack it here. */
  content: ' ';
  display: block;
  margin-top: 1rem;
  height: 1px;
}

/* Code figure. Not using <figure> because some generators (Doxygen) have it
   impossible to output custom tags. */
.m-code-figure, .m-console-figure {
  margin-top: 0;
  margin-left: 0;
  margin-right: 0;
  position: relative;
  padding: 1rem;
}
:is(.m-code-figure, .m-console-figure)::before {
  position: absolute;
  content: ' ';
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: -1; /* so it doesn't make the contents inactive */
  border-style: solid;
  border-width: 0.125rem;
  border-radius: var(--border-radius);
}
.m-code-figure::before {
  border-color: var(--code-background-color);
}
.m-console-figure::before {
  border-color: var(--console-background-color);
}
:is(.m-code-figure, .m-console-figure).m-flat::before {
  border-color: transparent;
}
:is(.m-code-figure, .m-console-figure) > pre:first-child {
  position: relative; /* so it's above the border */
  margin: -1rem -1rem 1rem -1rem;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}

/* "Nopad" code block inside a code/console figure -- show code and console
   output nicely packed together */
:is(.m-code-figure, .m-console-figure) > pre.m-nopad {
  margin-left: -0.875rem;
  margin-right: -0.875rem;
  margin-top: -1rem;
  margin-bottom: -0.875rem;
  padding-left: 0.875rem;
}

/* Figure caption */
:is(figure.m-figure, .m-code-figure, .m-console-figure) figcaption {
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
  font-weight: var(--heading-font-weight);
  font-size: 1.17rem; /* taken from webkit defaults for h3 */
}
:is(figure.m-figure, .m-code-figure, .m-console-figure) figcaption a {
  text-decoration: var(--link-decoration-heading);
}

/* Image grid */
.m-imagegrid > div {
  background-color: var(--background-color); /* to avoid section HL shining through */
}
.m-imagegrid > div > figure {
  display: block;
  float: left;
  position: relative;
  margin: 0;
}
.m-imagegrid > div > figure > :is(div, figcaption),
.m-imagegrid > div > figure > a > :is(div, figcaption) {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-color: var(--background-color);
  border-style: solid;
  border-width: 0.25rem;
  padding: 0.5rem;
}
.m-imagegrid > div > figure:first-child > :is(div, figcaption),
.m-imagegrid > div > figure:first-child > a > :is(div, figcaption) {
  border-left-width: 0;
}
.m-imagegrid > div > figure:last-child > :is(div, figcaption),
.m-imagegrid > div > figure:last-child > a > :is(div, figcaption) {
  border-right-width: 0;
}
.m-imagegrid > div > figure > figcaption,
.m-imagegrid > div > figure > a > figcaption {
  color: transparent;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  font-size: 0.75rem;
}
.m-imagegrid > div > figure > :is(div, figcaption)::before,
.m-imagegrid > div > figure > a > :is(div, figcaption)::before {
  content: '';
  display: inline-block;
  height: 100%;
  vertical-align: bottom;
  width: 0;
}
.m-imagegrid > div > figure:hover > figcaption,
.m-imagegrid > div > figure:hover > a > figcaption {
  background: linear-gradient(transparent 0%, transparent 75%, rgba(0, 0, 0, 0.85) 100%);
  color: #ffffff;
}
.m-imagegrid > div > figure > img,
.m-imagegrid > div > figure > a > img {
  width: 100%;
  height: 100%;
}
.m-imagegrid > div::after {
  display: block;
  content: ' ';
  clear: both;
}

@media screen and (max-width: 767px) {
  .m-imagegrid > div > figure {
    float: none;
    width: 100% !important;
  }
  .m-imagegrid > div > figure > :is(div, figcaption),
  .m-imagegrid > div > figure > a > :is(div, figcaption) {
    border-left-width: 0;
    border-right-width: 0;
  }
}

/* Inflatable content */
:is(
  .m-container-inflatable > .m-row > [class*='m-col-'],
  .m-container-inflatable > .m-row > [class*='m-col-'] section,
  .m-container-inflatable :is(
    [class*='m-center-'],
    [class*='m-left-'],
    [class*='m-right-'],
    .m-container-inflate
  )
) > :is(.m-note, .m-frame, .m-block, .m-imagegrid, pre, .m-code-figure, .m-console-figure) {
  margin-left: -1rem;
  margin-right: -1rem;
}

@media screen and (min-width: 576px) {
  .m-container-inflatable .m-center-s > :is(.m-note, .m-frame, .m-block, .m-imagegrid, pre, .m-code-figure, .m-console-figure) {
    margin-left: -1rem;
    margin-right: -1rem;
  }
  .m-container-inflatable .m-left-s > :is(.m-note, .m-frame, .m-block, .m-imagegrid, pre, .m-code-figure, .m-console-figure) {
    margin-left: -1rem;
    margin-right: 0;
  }
  .m-container-inflatable .m-right-s > :is(.m-note, .m-frame, .m-block, .m-imagegrid, pre, .m-code-figure, .m-console-figure) {
    margin-left: 0;
    margin-right: -1rem;
  }

  .m-container-inflatable > .m-row > .m-col-s-10 > .m-imagegrid.m-container-inflate,
  .m-container-inflatable > .m-row > .m-col-s-10 section > .m-imagegrid.m-container-inflate {
    margin-left: -10%;
    margin-right: -10%;
  }
}
@media screen and (min-width: 768px) {
  .m-container-inflatable .m-center-m > :is(.m-note, .m-frame, .m-block, .m-imagegrid, pre, .m-code-figure, .m-console-figure) {
    margin-left: -1rem;
    margin-right: -1rem;
  }
  .m-container-inflatable .m-left-m > :is(.m-note, .m-frame, .m-block, .m-imagegrid, pre, .m-code-figure, .m-console-figure) {
    margin-left: -1rem;
    margin-right: 0;
  }
  .m-container-inflatable .m-right-m > :is(.m-note, .m-frame, .m-block, .m-imagegrid, pre, .m-code-figure, .m-console-figure) {
    margin-left: 0;
    margin-right: -1rem;
  }

  .m-container-inflatable > .m-row > .m-col-m-10 > .m-imagegrid.m-container-inflate,
  .m-container-inflatable > .m-row > .m-col-m-10 section > .m-imagegrid.m-container-inflate {
    margin-left: -10%;
    margin-right: -10%;
  }
}
@media screen and (min-width: 992px) {
  .m-container-inflatable .m-center-l > :is(.m-note, .m-frame, .m-block, .m-imagegrid, pre, .m-code-figure, .m-console-figure) {
    margin-left: -1rem;
    margin-right: -1rem;
  }
  .m-container-inflatable .m-left-l > :is(.m-note, .m-frame, .m-block, .m-imagegrid, pre, .m-code-figure, .m-console-figure) {
    margin-left: -1rem;
    margin-right: 0;
  }
  .m-container-inflatable .m-right-l > :is(.m-note, .m-frame, .m-block, .m-imagegrid, pre, .m-code-figure, .m-console-figure) {
    margin-left: 0;
    margin-right: -1rem;
  }

  .m-container-inflatable > .m-row > .m-col-l-10 > .m-imagegrid.m-container-inflate,
  .m-container-inflatable > .m-row > .m-col-l-10 section > .m-imagegrid.m-container-inflate {
    margin-left: -10%;
    margin-right: -10%;
  }
}

/* Code block (uses Pygments CSS classes) */
pre.m-code span.hll {
  margin-left: -1.0rem;
  margin-right: -1.0rem;
  padding-left: 1.0rem;
}

/* Inverted code block / inline code */
:is(.m-code, .m-console).m-inverted > span {
  opacity: 0.3333;
}
:is(.m-code, .m-console).m-inverted > span.hll {
  opacity: 1;
  background-color: transparent; /* TODO: handle this in pygments directly */
  border-color: transparent;
}
.m-code.m-inverted { color: var(--code-inverted-color); }
.m-console.m-inverted { color: var(--console-inverted-color); }
.m-code.m-inverted > span.hll { color: var(--code-color); }
.m-cosole.m-inverted > span.hll { color: var(--console-color); }

/* Code color swatch */
.m-code-color {
  display: inline-block;
  width: 0.75rem;
  height: 0.75rem;
  vertical-align: -0.05rem;
  margin-left: 0.2rem;
  margin-right: 0.1rem;
  border-radius: 0.1rem;
}

/* Math block, math figure, inline math, math inside buttons because I am
   crazy */
div.m-math {
  overflow-x: auto;
  overflow-y: hidden; /* Chrome 62 displays a vertical scrollbar otherwise */
}
div.m-math svg {
  margin-left: auto;
  margin-right: auto;
  display: block;
}
div.m-button a svg.m-math { fill: var(--button-background-color); }
div.m-button.m-flat a svg.m-math { fill: var(--color); }
:is(
  div.m-button.m-flat a:hover,
  div.m-button.m-default a:is(:focus, :active)
) svg.m-math {
  fill: var(--link-active-color);
}

/* Plots, graphs. Graphs can be either div.m-graph svg or svg.m-graph, so using
   just .m-graph when referencing both a <div> graph and a <figure> graph. */
.m-graph { font-size: var(--font-size); }
div:is(.m-plot, .m-graph) svg {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
  display: block;
}
div.m-plot .m-background { fill: var(--plot-background-color); }
/* Font sizes are hardcoded in m.plots, change there first! */
div.m-plot svg .m-label { font-size: 11px; }
div.m-plot svg .m-title { font-size: 13px; }
div.m-plot svg .m-label, div.m-plot svg .m-title { fill: var(--color); }
div.m-plot svg .m-line {
  stroke: var(--color);
  stroke-width: 0.8;
}
div.m-plot svg .m-error {
  stroke: var(--plot-error-color);
  stroke-width: 1.5;
}
div.m-plot svg .m-label.m-dim { fill: var(--dim-color); }
.m-graph :is(
  g.m-edge path,
  g.m-cluster polygon,
  g.m-node.m-flat :is(ellipse, polygon)
) {
  fill: none;
}
.m-graph g.m-node:not(.m-flat) text {
  fill: var(--button-background-color);
}

/* Rendered math and graphs have no padding around, add it if in a figure,
   ensure it's applied only on the immediately first svg inside. Because we
   want a background under the padding as well, switch the box sizing to
   content box. */
figure.m-figure > svg:is(.m-math, .m-graph):first-child {
  padding: 1rem;
  box-sizing: content-box;
}
figure.m-figure:not(.m-flat) > svg:is(.m-math, .m-graph):first-child {
  background-color: var(--line-color);
}

/* Colored block, header links in a colored block, colored text, flat label */
.m-block.m-default { border-left-color: var(--line-color); }
.m-block.m-default :is(h3, h4, h5, h6),
:is(.m-text, .m-label.m-flat).m-default {
  color: var(--default-color);
}
.m-block.m-default :is(h3, h4, h5, h6) a {
  color: var(--link-color);
}
.m-block.m-primary { border-left-color: var(--primary-color); }
.m-block.m-primary :is(h3, h4, h5, h6),
.m-block.m-primary :is(h3, h4, h5, h6) a,
:is(.m-text, .m-label.m-flat).m-primary {
  color: var(--primary-color);
}
.m-block.m-success { border-left-color: var(--success-color); }
.m-block.m-success :is(h3, h4, h5, h6),
.m-block.m-success :is(h3, h4, h5, h6) a,
:is(.m-text, .m-label.m-flat).m-success {
  color: var(--success-color);
}
.m-block.m-warning { border-left-color: var(--warning-color); }
.m-block.m-warning :is(h3, h4, h5, h6),
.m-block.m-warning :is(h3, h4, h5, h6) a,
:is(.m-text, .m-label.m-flat).m-warning {
  color: var(--warning-color);
}
.m-block.m-danger { border-left-color: var(--danger-color); }
.m-block.m-danger :is(h3, h4, h5, h6),
.m-block.m-danger :is(h3, h4, h5, h6) a,
:is(.m-text, .m-label.m-flat).m-danger {
  color: var(--danger-color);
}
.m-block.m-info { border-left-color: var(--info-color); }
.m-block.m-info :is(h3, h4, h5, h6),
.m-block.m-info :is(h3, h4, h5, h6) a,
:is(.m-text, .m-label.m-flat).m-info {
  color: var(--info-color);
}
.m-block.m-dim { border-left-color: var(--dim-color); }
:is(.m-text, .m-label.m-flat, .m-block).m-dim {
  color: var(--dim-color);
}
:is(.m-block, .m-text).m-dim a { color: var(--dim-link-color); }
:is(.m-block, .m-text).m-dim a:is(:hover, :focus, :active) {
  color: var(--dim-link-active-color);
}
.m-block.m-flat { border-color: transparent; }
.m-block.m-flat :is(h3, h4, h5, h6) {
  color: var(--default-color);
}

/* Active link in a block header (gawd, this is verbose as hell). Dim blocks
   have the link colors already defined above. */
.m-block.m-default :is(h3, h4, h5, h6) a:is(:hover, :focus, :active) {
  color: var(--default-link-active-color);
}
.m-block.m-primary :is(h3, h4, h5, h6) a:is(:hover, :focus, :active) {
  color: var(--primary-link-active-color);
}
.m-block.m-success :is(h3, h4, h5, h6) a:is(:hover, :focus, :active) {
  color: var(--success-link-active-color);
}
.m-block.m-warning :is(h3, h4, h5, h6) a:is(:hover, :focus, :active) {
  color: var(--warning-link-active-color);
}
.m-block.m-danger :is(h3, h4, h5, h6) a:is(:hover, :focus, :active) {
  color: var(--danger-link-active-color);
}
.m-block.m-info :is(h3, h4, h5, h6) a:is(:hover, :focus, :active) {
  color: var(--info-link-active-color);
}

/* Colored button, non-flat label */
div.m-button a, .m-label { color: var(--button-background-color); }
div.m-button.m-flat a { color: var(--color); }
div.m-button.m-flat a:is(:hover, :focus, :active) {
  color: var(--link-active-color);
}
div.m-button.m-default a, .m-label:not(.m-flat).m-default { background-color: var(--default-color); }
div.m-button.m-primary a, .m-label:not(.m-flat).m-primary { background-color: var(--primary-color); }
div.m-button.m-success a, .m-label:not(.m-flat).m-success { background-color: var(--success-color); }
div.m-button.m-warning a, .m-label:not(.m-flat).m-warning { background-color: var(--warning-color); }
div.m-button.m-danger a, .m-label:not(.m-flat).m-danger { background-color: var(--danger-color); }
div.m-button.m-info a, .m-label:not(.m-flat).m-info { background-color: var(--info-color); }
div.m-button.m-dim a, .m-label:not(.m-flat).m-dim { background-color: var(--dim-color); }
div.m-button.m-default a:is(:hover, :focus, :active) {
  background-color: var(--default-link-active-color);
}
div.m-button.m-primary a:is(:hover, :focus, :active) {
  background-color: var(--primary-link-active-color);
}
div.m-button.m-success a:is(:hover, :focus, :active) {
  background-color: var(--success-link-active-color);
}
div.m-button.m-warning a:is(:hover, :focus, :active) {
  background-color: var(--warning-link-active-color);
}
div.m-button.m-danger a:is(:hover, :focus, :active) {
  background-color: var(--danger-link-active-color);
}
div.m-button.m-info a:is(:hover, :focus, :active) {
  background-color: var(--info-link-active-color);
}
div.m-button.m-dim a:is(:hover, :focus, :active) {
  /* Using a dedicated color here because we want the button dim by default,
     not highlighted as other links */
  background-color: var(--dim-button-active-color);
}

/* Colored note, table coloring */
.m-note.m-default { background-color: var(--default-filled-background-color); }
.m-note.m-default,
table.m-table tr.m-default :is(td, th),
table.m-table :is(td, th).m-default {
  /* No background for default table to keep the row hover */
  color: var(--default-filled-color);
}
:is(
  .m-note.m-default,
  table.m-table tr.m-default :is(td, th),
  table.m-table :is(td, th).m-default
) a:is(:hover, :focus, :active) {
  color: var(--default-filled-link-active-color);
}

.m-note.m-primary,
table.m-table tr.m-primary :is(td, th),
table.m-table :is(td, th).m-primary {
  background-color: var(--primary-filled-background-color);
  color: var(--primary-filled-color);
}
:is(
  .m-note.m-primary,
  table.m-table tr.m-primary :is(td, th),
  table.m-table :is(td, th).m-primary
) a {
  color: var(--primary-filled-link-color);
}
:is(
  .m-note.m-primary,
  table.m-table tr.m-primary :is(td, th),
  table.m-table :is(td, th).m-primary
) a:is(:hover, :focus, :active) {
  color: var(--primary-filled-link-active-color);
}

.m-note.m-success,
table.m-table tr.m-success :is(td, th),
table.m-table :is(td, th).m-success {
  background-color: var(--success-filled-background-color);
  color: var(--success-filled-color);
}
:is(
  .m-note.m-success,
  table.m-table tr.m-success :is(td, th),
  table.m-table :is(td, th).m-success
) a {
  color: var(--success-filled-link-color);
}
:is(
  .m-note.m-success,
  table.m-table tr.m-success :is(td, th),
  table.m-table :is(td, th).m-success
) a:is(:hover, :focus, :active) {
  color: var(--success-filled-link-active-color);
}

.m-note.m-warning,
table.m-table tr.m-warning :is(td, th),
table.m-table :is(td, th).m-warning {
  background-color: var(--warning-filled-background-color);
  color: var(--warning-filled-color);
}
:is(
  .m-note.m-warning,
  table.m-table tr.m-warning :is(td, th),
  table.m-table :is(td, th).m-warning
) a {
  color: var(--warning-filled-link-color);
}
:is(
  .m-note.m-warning,
  table.m-table tr.m-warning :is(td, th),
  table.m-table :is(td, th).m-warning
) a:is(:hover, :focus, :active) {
  color: var(--warning-filled-link-active-color);
}

.m-note.m-danger,
table.m-table tr.m-danger :is(td, th),
table.m-table :is(td, th).m-danger {
  background-color: var(--danger-filled-background-color);
  color: var(--danger-filled-color);
}
:is(
  .m-note.m-danger,
  table.m-table tr.m-danger :is(td, th),
  table.m-table :is(td, th).m-danger
) a {
  color: var(--danger-filled-link-color);
}
:is(
  .m-note.m-danger,
  table.m-table tr.m-danger :is(td, th),
  table.m-table :is(td, th).m-danger
) a:is(:hover, :focus, :active) {
  color: var(--danger-filled-link-active-color);
}

.m-note.m-info,
table.m-table tr.m-info :is(td, th),
table.m-table :is(td, th).m-info {
  background-color: var(--info-filled-background-color);
  color: var(--info-filled-color);
}
:is(
  .m-note.m-info,
  table.m-table tr.m-info :is(td, th),
  table.m-table :is(td, th).m-info
) a {
  color: var(--info-filled-link-color);
}
:is(
  .m-note.m-info,
  table.m-table tr.m-info :is(td, th),
  table.m-table :is(td, th).m-info
) a:is(:hover, :focus, :active) {
  color: var(--info-filled-link-active-color);
}

.m-note.m-dim,
table.m-table tr.m-dim :is(td, th),
table.m-table :is(td, th).m-dim {
  background-color: var(--dim-filled-background-color);
  color: var(--dim-filled-color);
}
:is(
  .m-note.m-dim,
  table.m-table tr.m-dim :is(td, th),
  table.m-table :is(td, th).m-dim
) a {
  color: var(--dim-filled-link-color);
}
:is(
  .m-note.m-dim,
  table.m-table tr.m-dim :is(td, th),
  table.m-table :is(td, th).m-dim
) a:is(:hover, :focus, :active) {
  color: var(--dim-filled-link-active-color);
}

/* Colored figure */
figure.m-figure.m-default::before { border-color: var(--default-filled-background-color); }
figure.m-figure.m-default figcaption { color: var(--default-color); }
figure.m-figure.m-primary::before { border-color: var(--primary-filled-background-color); }
figure.m-figure.m-primary figcaption { color: var(--primary-color); }
figure.m-figure.m-success::before { border-color: var(--success-filled-background-color); }
figure.m-figure.m-success figcaption { color: var(--success-color); }
figure.m-figure.m-warning::before { border-color: var(--warning-filled-background-color); }
figure.m-figure.m-warning figcaption { color: var(--warning-color); }
figure.m-figure.m-danger::before { border-color: var(--danger-filled-background-color); }
figure.m-figure.m-danger figcaption { color: var(--danger-color); }
figure.m-figure.m-info::before { border-color: var(--info-filled-background-color); }
figure.m-figure.m-info figcaption { color: var(--info-color); }
figure.m-figure.m-dim::before { border-color: var(--dim-filled-background-color); }
figure.m-figure.m-dim { color: var(--dim-color); }
figure.m-figure.m-dim a { color: var(--dim-link-color); }
figure.m-figure.m-dim a:is(:hover, :focus, :active) {
  color: var(--dim-link-active-color);
}

/* Colored math block, inline math, colored math parts, plots and
   global-colored graphs. Should be before local graph coloring, so the latter
   can override this. Applies to either div.m-math svg or svg.m.math
   (div.m-graph svg or svg.m-graph), so using just .m-math (.m-graph). Besides
   that, using svg anywhere would make it a higher priority, breaking the
   colors.

   When modifying, use these test pages for a visual check & expand as needed:
    https://mcss.mosra.cz/plugins/math-and-code/test/
    https://mcss.mosra.cz/plugins/plots-and-graphs/test/ */
.m-math { fill: var(--color); }
.m-math.m-default, .m-math :is(g, rect).m-default,
div.m-plot svg .m-bar.m-default,
.m-graph :is(
  g.m-edge :is(polygon, text),
  g.m-node:not(.m-flat) :is(ellipse, polygon),
  g.m-node.m-flat text,
  g.m-cluster text
) {
  fill: var(--default-color);
}
.m-graph :is(
  g.m-edge :is(polygon, path),
  g.m-node :is(ellipse, polygon, polyline),
  g.m-cluster polygon
) {
  stroke: var(--default-color);
}

.m-math.m-primary, .m-math :is(g, rect).m-primary,
div.m-plot svg .m-bar.m-primary,
.m-graph.m-primary :is(
  g.m-edge :is(polygon, text),
  g.m-node:not(.m-flat) :is(ellipse, polygon),
  g.m-node.m-flat text,
  g.m-cluster text
) {
  fill: var(--primary-color);
}
.m-graph.m-primary :is(
  g.m-edge :is(polygon, path),
  g.m-node :is(ellipse, polygon, polyline),
  g.m-cluster polygon
) {
  stroke: var(--primary-color);
}

.m-math.m-success, .m-math :is(g, rect).m-success,
div.m-plot svg .m-bar.m-success,
.m-graph.m-success :is(
  g.m-edge :is(polygon, text),
  g.m-node:not(.m-flat) :is(ellipse, polygon),
  g.m-node.m-flat text,
  g.m-cluster text
) {
  fill: var(--success-color);
}
.m-graph.m-success :is(
  g.m-edge :is(polygon, path),
  g.m-node :is(ellipse, polygon, polyline),
  g.m-cluster polygon
) {
  stroke: var(--success-color);
}

.m-math.m-warning, .m-math :is(g, rect).m-warning,
div.m-plot svg .m-bar.m-warning,
.m-graph.m-warning :is(
  g.m-edge :is(polygon, text),
  g.m-node:not(.m-flat) :is(ellipse, polygon),
  g.m-node.m-flat text,
  g.m-cluster text
) {
  fill: var(--warning-color);
}
.m-graph.m-warning :is(
  g.m-edge :is(polygon, path),
  g.m-node :is(ellipse, polygon, polyline),
  g.m-cluster polygon
) {
  stroke: var(--warning-color);
}

.m-math.m-danger, .m-math :is(g, rect).m-danger,
div.m-plot svg .m-bar.m-danger,
.m-graph.m-danger :is(
  g.m-edge :is(polygon, text),
  g.m-node:not(.m-flat) :is(ellipse, polygon),
  g.m-node.m-flat text,
  g.m-cluster text
) {
  fill: var(--danger-color);
}
.m-graph.m-danger :is(
  g.m-edge :is(polygon, path),
  g.m-node :is(ellipse, polygon, polyline),
  g.m-cluster polygon
) {
  stroke: var(--danger-color);
}
.m-math.m-info, .m-math :is(g, rect).m-info,
div.m-plot svg .m-bar.m-info,
.m-graph.m-info :is(
  g.m-edge :is(polygon, text),
  g.m-node:not(.m-flat) :is(ellipse, polygon),
  g.m-node.m-flat text,
  g.m-cluster text
) {
  fill: var(--info-color);
}
.m-graph.m-info :is(
  g.m-edge :is(polygon, path),
  g.m-node :is(ellipse, polygon, polyline),
  g.m-cluster polygon
) {
  stroke: var(--info-color);
}
.m-math.m-dim, .m-math :is(g, rect).m-dim,
div.m-plot svg .m-bar.m-dim,
.m-graph.m-dim :is(
  g.m-edge :is(polygon, text),
  g.m-node:not(.m-flat) :is(ellipse, polygon),
  g.m-node.m-flat text,
  g.m-cluster text
) {
  fill: var(--dim-color);
}
.m-graph.m-dim :is(
  g.m-edge :is(polygon, path),
  g.m-node :is(ellipse, polygon, polyline),
  g.m-cluster polygon
) {
  stroke: var(--dim-color);
}

/* Local-colored graphs. Later so it overrides global coloring. Applies to
   either div.m-graph svg or svg.m-graph, so using just .m-graph. This is not
   needed for math, for some reason the overrides work correctly.

   When modifying, use these test pages for a visual check & expand as needed:
    https://mcss.mosra.cz/plugins/math-and-code/test/
    https://mcss.mosra.cz/plugins/plots-and-graphs/test/ */
.m-graph :is(
  g.m-edge.m-default :is(polygon, text),
  g:is(.m-node, .m-cluster).m-default text
  g.m-node.m-default:not(.m-flat) :is(ellipse, polygon)
) {
  fill: var(--default-color);
}
.m-graph :is(
  g.m-edge.m-default :is(polygon, path),
  g.m-node.m-default :is(ellipse, polygon, polyline),
  g.m-cluster.m-default polygon
) {
  stroke: var(--default-color);
}

.m-graph :is(
  g.m-edge.m-primary :is(polygon, text),
  g:is(.m-node, .m-cluster).m-primary text
  g.m-node.m-primary:not(.m-flat) :is(ellipse, polygon)
) {
  fill: var(--primary-color);
}
.m-graph :is(
  g.m-edge.m-primary :is(polygon, path),
  g.m-node.m-primary :is(ellipse, polygon, polyline),
  g.m-cluster.m-primary polygon
) {
  stroke: var(--primary-color);
}

.m-graph :is(
  g.m-edge.m-success :is(polygon, text),
  g:is(.m-node, .m-cluster).m-success text
  g.m-node.m-success:not(.m-flat) :is(ellipse, polygon)
) {
  fill: var(--success-color);
}
.m-graph :is(
  g.m-edge.m-success :is(polygon, path),
  g.m-node.m-success :is(ellipse, polygon, polyline),
  g.m-cluster.m-success polygon
) {
  stroke: var(--success-color);
}

.m-graph :is(
  g.m-edge.m-warning :is(polygon, text),
  g:is(.m-node, .m-cluster).m-warning text
  g.m-node.m-warning:not(.m-flat) :is(ellipse, polygon)
) {
  fill: var(--warning-color);
}
.m-graph :is(
  g.m-edge.m-warning :is(polygon, path),
  g.m-node.m-warning :is(ellipse, polygon, polyline),
  g.m-cluster.m-warning polygon
) {
  stroke: var(--warning-color);
}

.m-graph :is(
  g.m-edge.m-danger :is(polygon, text),
  g:is(.m-node, .m-cluster).m-danger text
  g.m-node.m-danger:not(.m-flat) :is(ellipse, polygon)
) {
  fill: var(--danger-color);
}
.m-graph :is(
  g.m-edge.m-danger :is(polygon, path),
  g.m-node.m-danger :is(ellipse, polygon, polyline),
  g.m-cluster.m-danger polygon
) {
  stroke: var(--danger-color);
}

.m-graph :is(
  g.m-edge.m-info :is(polygon, text),
  g:is(.m-node, .m-cluster).m-info text
  g.m-node.m-info:not(.m-flat) :is(ellipse, polygon)
) {
  fill: var(--info-color);
}
.m-graph :is(
  g.m-edge.m-info :is(polygon, path),
  g.m-node.m-info :is(ellipse, polygon, polyline),
  g.m-cluster.m-info polygon
) {
  stroke: var(--info-color);
}

.m-graph :is(
  g.m-edge.m-dim :is(polygon, text),
  g:is(.m-node, .m-cluster).m-dim text
  g.m-node.m-dim:not(.m-flat) :is(ellipse, polygon)
) {
  fill: var(--dim-color);
}
.m-graph :is(
  g.m-edge.m-dim :is(polygon, path),
  g.m-node.m-dim :is(ellipse, polygon, polyline),
  g.m-cluster.m-dim polygon
) {
  stroke: var(--dim-color);
}

/* Spacing after every block element, but not after the last and not when
   m-nopadb is specified. It's div.m-math and div.m-graph instead of .m-math and
   .m-graph because math / graph figures are handled already with
   figure.m-figure. */
p, ul, ol, dl, blockquote, pre, .m-code-figure, .m-console-figure, hr, .m-note,
.m-frame, .m-block, div.m-button, div.m-scroll, table.m-table, div.m-image,
:is(img, svg).m-image, figure.m-figure, .m-imagegrid, div.m-math, div.m-graph,
div.m-plot {
  margin-bottom: 1rem;
}
:is(
  p, ul, ol, dl, blockquote, pre, .m-code-figure, .m-console-figure, hr, .m-note,
  .m-frame, .m-block, div.m-button, div.m-scroll, table.m-table, div.m-image,
  :is(img, svg).m-image, figure.m-figure, .m-imagegrid, div.m-math, div.m-graph,
  div.m-plot
):is(:last-child, .m-nopadb) {
  margin-bottom: 0;
}

/* List items usually have just inline elements and are kept compact. If (sane)
   block elements are inside list items, they have spacing even as last, but
   not if the list item is the last. Also not if m-nopadb is specified. */
li > :is(
  p, blockquote, pre, .m-code-figure, .m-console-figure, .m-note, .m-frame,
  .m-block, .m-button, .m-scroll, table.m-table, :is(img, svg).m-image, div.m-image
  figure.m-figure, div.m-math, div.m-graph, div.m-plot
):last-child {
  margin-bottom: 1rem;
}
li:last-child > :is(
  p, blockquote, pre, .m-code-figure, .m-console-figure, .m-note, .m-frame,
  .m-block, .m-button, .m-scroll, table.m-table, :is(img, svg).m-image, div.m-image
  figure.m-figure, div.m-math, div.m-graph, div.m-plot
):is(:last-child, .m-nopadb) {
  margin-bottom: 0;
}
